#include <vector>
#include <queue>
#include <deque>
#include <cmath>
#include <algorithm>
#include <string>
#include <climits>
#include <iomanip>
#include <set>
#include <map>
#include <math.h>
#include <stack>
#include <list>

#include <fstream>
//#include <iostream>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

ifstream cin("input.txt"); ofstream cout("output.txt");
//ifstream cin("nfc.in"); ofstream cout("nfc.out");

int n = 0;
map <char, int> name;
string nameback;
vector <vector <vector<int> > > g;
vector <set <char> > gc;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int q;
	string s;
	cin >> q >> s;
	g.resize(1);
	gc.resize(1);
	nameback += s;
	name.insert({ s[0], n++ });
	while (q--) {
		getline(cin, s);
		if (s == "") {
			q++;
			continue;
		}
		if (name.find(s[0]) == name.end()) {
			g.push_back(vector <vector <int> >());
			gc.push_back(set <char>());
			name.insert({ s[0], n++ });
			nameback += s[0];
		}
		int it = name.find(s[0])->second;
		g[it].push_back(vector<int>());
		if (s.size() <= 5) {
			gc[it].insert(1);
			g[it][g[it].size() - 1].push_back(-1);
		}
		else if (s.size() <= 6 && s[5] >= 'a' && s[5] < 'z')
			gc[it].insert(s[5]);
		for (int i = 5; i < s.size(); i++) {
			if (s[i] >= 'a' && s[i] < 'z')
				g[it][g[it].size() - 1].push_back(-s[i]);
			else if (name.find(s[i]) == name.end()) {
				g.push_back(vector <vector <int> >());
				gc.push_back(set <char>());
				g[it][g[it].size() - 1].push_back(n);
				name.insert({ s[i], n++ });
				nameback += s[i];
			}
			else
				g[it][g[it].size() - 1].push_back(name.find(s[i])->second);
		}
	}
	cin >> s;
	vector <vector <vector <bool> > > dp(n, vector<vector<bool> >(s.size(), vector<bool>(s.size() + 1, false)));
	vector <vector <vector <vector<vector<bool>>>>> hp(n);
	for (int v = 0; v < n; v++) {
		hp[v].resize(g[v].size());
		for (int h = 0; h < g[v].size(); h++)
			hp[v][h].resize(s.size(), vector<vector<bool>>(s.size() + 1, vector<bool>(g[v][h].size() + 1, false)));
		for (int h = 0; h < gc[v].size(); h++) {
			bool t = gc[v].find('1') != gc[v].end();
			for (int i = 0; i < s.size(); i++) {
				dp[v][i][i + 1] = gc[v].find(s[i]) != gc[v].end();
				dp[v][i][i] = t;
				hp[v][h][i][i][0] = true;
			}
		}
	}
	for (int m = 1; m < s.size(); m++) {
		for (int i = 0, j = i + m; i < s.size() - m; i++, j++) {
			for (int v = 0; v < n; v++) {
				for (int h = 0; h < g[v].size(); h++) {
					for (int k = 1; k <= g[v][h].size(); k++) {
						if (g[v][h][k - 1] >= 0) {
							for (int r = i; r <= j; r++) 
								hp[v][h][i][j + 1][k] = hp[v][h][i][j + 1][k] || (hp[v][h][i][r][k - 1] && dp[g[v][h][k - 1]][r][j + 1]);
						}
						else {
							hp[v][h][i][j + 1][k] = hp[v][h][i][j + 1][k] || (hp[v][h][i][j][k - 1] && s[j - 1] == -g[v][h][k - 1]);
						}
					}
				}
			}
		}
	}

	for (int i = 0; i < s.size(); i++) {
		for (int j = 0; j < s.size(); j++) {
			for (int v = 0; v < g.size(); v++) {
				for (int h = 0; h < g[v].size(); h++) 
					dp[v][i][j] = dp[v][i][j] || hp[v][h][i][j][g[v][h].size()];
			}
		}
	}
	if (dp[0][0][s.size() - 1])
		cout << "yes";
	else
		cout << "no";
	return 0;
}
